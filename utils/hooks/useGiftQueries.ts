"use client";

import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import type { Gift, GiftContent } from "@/utils/types/gift";
import { useAuthSession } from "./useAuthSession";
import { invalidateGiftCache } from "../patches/unified-fetch-patch";
import { useMemo, useRef, useCallback } from "react";

// –ö–ª—é—á–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
export const QUERY_KEYS = {
  GIFTS: "gifts",
  GIFT: (id: string) => ["gift", id],
  GIFT_CONTENT: (id: string) => ["gift-content", id],
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
export function useGifts() {
  return useQuery({
    queryKey: [QUERY_KEYS.GIFTS],
    queryFn: async () => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ URL, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞
      const timestamp = Date.now();
      const response = await fetch(`/api/gifts?_t=${timestamp}`);
      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤");
      }
      return response.json() as Promise<Gift[]>;
    },
    staleTime: 0, // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    gcTime: 0, // –û—Ç–∫–ª—é—á–∞–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à–µ
    refetchOnWindowFocus: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
    refetchOnMount: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    refetchOnReconnect: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ ID
export function useGift(id: string) {
  return useQuery({
    queryKey: QUERY_KEYS.GIFT(id),
    queryFn: async () => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ URL, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞
      const timestamp = Date.now();
      const response = await fetch(`/api/gifts/${id}?_t=${timestamp}`);
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ ${id}`);
      }
      return response.json() as Promise<Gift>;
    },
    enabled: !!id,
    staleTime: 0, // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    gcTime: 0, // –û—Ç–∫–ª—é—á–∞–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à–µ (–≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö React Query cacheTime –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ gcTime)
    refetchOnWindowFocus: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
    refetchOnMount: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    refetchOnReconnect: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞
export function useGiftContent(id: string) {
  return useQuery({
    queryKey: QUERY_KEYS.GIFT_CONTENT(id),
    queryFn: async () => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ URL, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞
      const timestamp = Date.now();
      const response = await fetch(`/api/gift-content/${id}?_t=${timestamp}`);
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞ ${id}`);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ contentUrl, —Å–ª–µ–¥—É–µ–º –∑–∞ –Ω–∏–º
      if (response.redirected) {
        const contentResponse = await fetch(response.url);
        if (!contentResponse.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞ ${id} –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);
        }
        return contentResponse.json() as Promise<GiftContent>;
      }
      
      return response.json() as Promise<GiftContent>;
    },
    enabled: !!id,
    staleTime: 0, // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    gcTime: 0, // –û—Ç–∫–ª—é—á–∞–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à–µ (–≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö React Query cacheTime –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ gcTime)
    refetchOnWindowFocus: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
    refetchOnMount: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    refetchOnReconnect: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + –∫–æ–Ω—Ç–µ–Ω—Ç) –≤ –æ–¥–Ω–æ–º —Ö—É–∫–µ
export function useGiftData(id: string) {
  const giftQuery = useGift(id);
  const contentQuery = useGiftContent(id);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
  const authQuery = useAuthSession();

  const isLoading = giftQuery.isLoading || contentQuery.isLoading || authQuery.isLoading;
  const isError = giftQuery.isError || contentQuery.isError || authQuery.isError;
  const error = giftQuery.error || contentQuery.error || authQuery.error;

  // –°–æ–∑–¥–∞–µ–º –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç data
  const data = useMemo(() => {
    if (isLoading || isError) return null;
    return {
      gift: giftQuery.data,
      content: contentQuery.data,
      isAuthenticated: authQuery.data?.isAuthenticated,
      memoryPhoto: giftQuery.data?.memoryPhoto,
    };
  }, [isLoading, isError, giftQuery.data, contentQuery.data, authQuery.data?.isAuthenticated]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ cacheInvalidated
  const cacheInvalidatedRef = useRef(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const refetch = useCallback(async () => {
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω
    if (!cacheInvalidatedRef.current) {
      console.log(`üîÑ Invalidating cache for gift ${id}`);
      invalidateGiftCache(id);
      cacheInvalidatedRef.current = true;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    await Promise.all([
      giftQuery.refetch(),
      contentQuery.refetch()
    ]);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    setTimeout(() => {
      cacheInvalidatedRef.current = false;
    }, 500);
  }, [id, giftQuery, contentQuery]);

  return {
    data,
    isLoading,
    isError,
    error,
    refetch
  };
}

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
export function useCreateGift() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async (giftData: any) => {
      const response = await fetch("/api/gifts", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(giftData),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞");
      }
      
      return response.json();
    },
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.GIFTS] });
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à API –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
      invalidateGiftCache();
    },
  });
}

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
export function useUpdateGift(id: string) {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async (giftData: any) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
      if (!id) {
        throw new Error("ID –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω");
      }
      
      const response = await fetch(`/api/gifts/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(giftData),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞");
      }
      
      return response.json();
    },
    onSuccess: (data) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–µ—à–∞
      if (!id) return;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
      queryClient.setQueryData(QUERY_KEYS.GIFT(id), data);
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.GIFTS] });
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞
      queryClient.invalidateQueries({ queryKey: QUERY_KEYS.GIFT_CONTENT(id) });
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à API –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
      invalidateGiftCache(id);
    },
  });
}

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
export function useDeleteGift() {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: async (id: string) => {
      const response = await fetch(`/api/gifts/${id}`, {
        method: "DELETE",
      });
      
      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞");
      }
      
      return id;
    },
    onSuccess: (deletedId) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
      queryClient.invalidateQueries({ queryKey: [QUERY_KEYS.GIFTS] });
      // –£–¥–∞–ª—è–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
      queryClient.removeQueries({ queryKey: QUERY_KEYS.GIFT(deletedId) });
      // –£–¥–∞–ª—è–µ–º –∫–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞
      queryClient.removeQueries({ queryKey: QUERY_KEYS.GIFT_CONTENT(deletedId) });
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à API –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
      invalidateGiftCache(deletedId);
    },
  });
} 