"use client";

// ==================== –û–ë–©–ê–Ø –ß–ê–°–¢–¨ ====================

// –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è fetch
const originalFetch = globalThis.fetch;

// –¢–∏–ø—ã –¥–ª—è –∫–µ—à–∞
interface CacheEntry {
  data: any;
  timestamp: number;
  status: number;
  statusText: string;
  headers: Record<string, string>;
}

// –ö–µ—à –∑–∞–ø—Ä–æ—Å–æ–≤
const requestCache: Record<string, CacheEntry> = {};

// –¢–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
const pendingRequests: Record<string, Promise<Response>> = {};

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø ====================

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ –º—Å)
const CACHE_TTL = {
  SESSION: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏
  GIFT: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞
  GIFT_CONTENT: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–∞—Ä–∫–∞
  DEFAULT: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
};

// –ü–æ–ª—É—á–∞–µ–º –∫–µ—à –∫–ª—é—á –¥–ª—è URL
function getCacheKey(url: string, init?: RequestInit): string {
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª—é—á –∑–∞–≥–æ–ª–æ–≤–∫–∏ Authorization, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  let authHeader: string | null = null;
  
  if (init?.headers) {
    if (init.headers instanceof Headers) {
      authHeader = init.headers.get('Authorization');
    } else if (typeof init.headers === 'object') {
      const headers = init.headers as Record<string, string>;
      authHeader = headers['Authorization'] || null;
    }
  }
  
  return authHeader ? `${url}|${authHeader}` : url;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º TTL –¥–ª—è URL
function getTTL(url: string): number {
  if (!url) return CACHE_TTL.DEFAULT;
  
  if (url.includes('/api/auth/session')) {
    return CACHE_TTL.SESSION;
  }
  if (url.includes('/api/gifts/')) {
    return CACHE_TTL.GIFT;
  }
  if (url.includes('/api/gift-content/')) {
    return CACHE_TTL.GIFT_CONTENT;
  }
  return CACHE_TTL.DEFAULT;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ URL –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å—Å—è
function shouldCacheUrl(url: string, method: string): boolean {
  if (method !== 'GET') return false;
  
  // –í –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  if (typeof window !== 'undefined' && window.location.hostname !== 'localhost') {
    return false;
  }
  
  // –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é, –Ω–æ –Ω–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ø–æ–¥–∞—Ä–∫–∞–º
  return url.includes('/api/auth/session');
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤
  // url.includes('/api/gifts') || 
  // url.includes('/api/gift-content')
}

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
let requestId = 0;

// –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∫–ª—é—á–∞ –∫–µ—à–∞
function getUrlFromCacheKey(cacheKey: string): string {
  const parts = cacheKey.split('|');
  return parts[0] || '';
}

// ==================== –ü–ê–¢–ß –î–õ–Ø FETCH ====================

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –µ–¥–∏–Ω—ã–π –ø–∞—Ç—á –¥–ª—è fetch —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
 */
export function applyUnifiedFetchPatch() {
  // –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω
  if ((globalThis.fetch as any).__patchedUnified) return;
  
  // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–¥–∞—Ä–∫–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  invalidateGiftCache();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  loadCacheFromStorage();
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é fetch
  globalThis.fetch = async function patchedFetch(input: RequestInfo | URL, init?: RequestInit) {
    const url = input instanceof Request ? input.url : String(input);
    const method = init?.method || 'GET';
    const id = ++requestId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const cacheKey = getCacheKey(url, init);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É API, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
    if (!shouldCacheUrl(url, method)) {
      return originalFetch(input, init);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    console.log(`üîç[${id}] Intercepting API request: ${method} ${url}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ
    if (requestCache[cacheKey]) {
      const entry = requestCache[cacheKey];
      const ttl = getTTL(url);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–µ—à
      if (Date.now() - entry.timestamp < ttl) {
        console.log(`üü¢[${id}] Returning cached data for:`, url);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        return new Response(JSON.stringify(entry.data), {
          status: entry.status,
          statusText: entry.statusText,
          headers: new Headers(entry.headers),
        });
      } else {
        console.log(`üü†[${id}] Cache expired for:`, url);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –∑–∞–ø—Ä–æ—Å –∫ —ç—Ç–æ–º—É URL
    if (pendingRequests[cacheKey]) {
      console.log(`üü£[${id}] Reusing pending request for:`, url);
      
      try {
        // –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        await pendingRequests[cacheKey];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–µ—à–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞)
        if (requestCache[cacheKey]) {
          const entry = requestCache[cacheKey];
          
          console.log(`üü£[${id}] Using cached result from pending request for:`, url);
          
          // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ Response –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
          return new Response(JSON.stringify(entry.data), {
            status: entry.status,
            statusText: entry.statusText,
            headers: new Headers(entry.headers),
          });
        }
      } catch (e) {
        console.error(`‚ö†Ô∏è[${id}] Error waiting for pending request:`, e);
      }
      
      // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ
      console.log(`‚ö†Ô∏è[${id}] Cache missing after pending request, retrying:`, url);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –ø—Ä–æ–º–∏—Å
    console.log(`üîµ[${id}] Making real request to:`, url);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –∑–∞–ø—Ä–æ—Å–∞
      pendingRequests[cacheKey] = originalFetch(input, init);
      
      // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
      const response = await pendingRequests[cacheKey];
      
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –∫–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (response.ok) {
        try {
          const clonedResponse = response.clone();
          const data = await clonedResponse.json();
          
          // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
          const headers: Record<string, string> = {};
          clonedResponse.headers.forEach((value, key) => {
            headers[key] = value;
          });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
          requestCache[cacheKey] = {
            data,
            timestamp: Date.now(),
            status: clonedResponse.status,
            statusText: clonedResponse.statusText,
            headers
          };
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
          saveCacheToStorage();
          
          console.log(`üíæ[${id}] Data cached for:`, url);
        } catch (e) {
          console.error(`‚ö†Ô∏è[${id}] Error caching response:`, e);
        }
      }
      
      return response;
    } finally {
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö, –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
      delete pendingRequests[cacheKey];
    }
  };
  
  // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–∞—Ç—á –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω
  (globalThis.fetch as any).__patchedUnified = true;
  
  console.log('‚úÖ Unified fetch patch applied');
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è beforeunload –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (typeof window !== 'undefined') {
    window.addEventListener('beforeunload', () => saveCacheToStorage());
  }
}

// ==================== –†–ê–ë–û–¢–ê –° –•–†–ê–ù–ò–õ–ò–©–ï–ú ====================

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–µ—à –≤ localStorage
 */
function saveCacheToStorage() {
  if (typeof window === 'undefined') return;
  
  try {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    const keys = Object.keys(requestCache);
    let cacheToSave = { ...requestCache };
    
    if (keys.length > 50) {
      // –ï—Å–ª–∏ –∫–µ—à —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 20 —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –∑–∞–ø–∏—Å–µ–π
      const freshKeys = keys
        .sort((a, b) => {
          // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ undefined
          const timestampA = requestCache[a]?.timestamp || 0;
          const timestampB = requestCache[b]?.timestamp || 0;
          return timestampB - timestampA;
        })
        .slice(0, 20);
      
      cacheToSave = {};
      for (const key of freshKeys) {
        if (requestCache[key]) {
          cacheToSave[key] = requestCache[key];
        }
      }
    }
    
    localStorage.setItem('api_request_cache', JSON.stringify(cacheToSave));
    console.log(`üíæ Saved ${Object.keys(cacheToSave).length} entries to localStorage`);
  } catch (e) {
    console.error('Error saving cache to localStorage:', e);
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–µ—à –∏–∑ localStorage
 */
function loadCacheFromStorage() {
  if (typeof window === 'undefined') return;
  
  try {
    const savedCache = localStorage.getItem('api_request_cache');
    if (savedCache) {
      const parsed = JSON.parse(savedCache) as Record<string, unknown>;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
      for (const [cacheKey, entry] of Object.entries(parsed)) {
        if (
          entry && 
          typeof entry === 'object' && 
          'data' in entry && 
          'timestamp' in entry &&
          'status' in entry &&
          'statusText' in entry &&
          'headers' in entry
        ) {
          const typedEntry = entry as CacheEntry;
          // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∫–ª—é—á–∞ –∫–µ—à–∞
          const url = getUrlFromCacheKey(cacheKey);
          const ttl = getTTL(url);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
          if (Date.now() - typedEntry.timestamp < ttl) {
            requestCache[cacheKey] = typedEntry;
          }
        }
      }
      
      console.log(`üîÑ Loaded ${Object.keys(requestCache).length} entries from localStorage`);
    }
  } catch (e) {
    console.error('Error loading cache from localStorage:', e);
  }
}

// ==================== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ï–®–ï–ú ====================

/**
 * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à
 */
export function invalidateAllCache() {
  Object.keys(requestCache).forEach(key => delete requestCache[key]);
  localStorage.removeItem('api_request_cache');
  console.log('üóëÔ∏è Entire cache invalidated');
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–µ—à —Å–µ—Å—Å–∏–∏
 */
export function invalidateSessionCache() {
  if (typeof window === 'undefined') return;
  
  console.log('üîÑ Invalidating session cache');
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å URL, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º /api/auth/session
  Object.keys(requestCache).forEach(key => {
    if (key.includes('/api/auth/session')) {
      delete requestCache[key];
    }
  });
  
  // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ localStorage
  try {
    localStorage.removeItem('auth_session_cache');
  } catch (e) {
    console.error('Error removing session from localStorage:', e);
  }
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ cookie —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  if (typeof document !== 'undefined') {
    document.cookie = 'next-auth.session-token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
    document.cookie = '__Secure-next-auth.session-token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure;';
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∫–µ—à –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤
 */
export function invalidateGiftCache(giftId?: string) {
  if (giftId) {
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –ø–æ–¥–∞—Ä–∫–∞, –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
    const keysToDelete = Object.keys(requestCache).filter(key => {
      const url = getUrlFromCacheKey(key);
      return url.includes(`/api/gifts/${giftId}`) || url.includes(`/api/gift-content/${giftId}`);
    });
    
    keysToDelete.forEach(key => delete requestCache[key]);
    console.log(`üóëÔ∏è Invalidated cache for gift ${giftId}`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º localStorage –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
    try {
      const savedCache = localStorage.getItem('api_request_cache');
      if (savedCache) {
        const parsed = JSON.parse(savedCache);
        let changed = false;
        
        Object.keys(parsed).forEach(key => {
          const url = getUrlFromCacheKey(key);
          if (url.includes(`/api/gifts/${giftId}`) || url.includes(`/api/gift-content/${giftId}`)) {
            delete parsed[key];
            changed = true;
          }
        });
        
        if (changed) {
          localStorage.setItem('api_request_cache', JSON.stringify(parsed));
          console.log(`üóëÔ∏è LocalStorage cache cleared for gift ${giftId}`);
        }
      }
    } catch (e) {
      console.error('Error clearing localStorage cache:', e);
    }
  } else {
    // –ò–Ω–∞—á–µ –æ—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à –ø–æ–¥–∞—Ä–∫–æ–≤
    const keysToDelete = Object.keys(requestCache).filter(key => {
      const url = getUrlFromCacheKey(key);
      return url.includes('/api/gifts') || url.includes('/api/gift-content');
    });
    
    keysToDelete.forEach(key => delete requestCache[key]);
    console.log('üóëÔ∏è Gift cache invalidated');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º localStorage –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    try {
      const savedCache = localStorage.getItem('api_request_cache');
      if (savedCache) {
        const parsed = JSON.parse(savedCache);
        let changed = false;
        
        Object.keys(parsed).forEach(key => {
          const url = getUrlFromCacheKey(key);
          if (url.includes('/api/gifts') || url.includes('/api/gift-content')) {
            delete parsed[key];
            changed = true;
          }
        });
        
        if (changed) {
          localStorage.setItem('api_request_cache', JSON.stringify(parsed));
          console.log('üóëÔ∏è LocalStorage cache cleared for all gifts');
        }
      }
    } catch (e) {
      console.error('Error clearing localStorage cache:', e);
    }
  }
  
  saveCacheToStorage();
} 