"use client";

// –•—Ä–∞–Ω–∏–º –ø—Ä–æ–º–∏—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Å—Å–∏–∏
let pendingSessionRequest: Promise<Response> | null = null;
let lastSessionData: any = null;
const originalFetch = globalThis.fetch;

/**
 * –ü–∞—Ç—á –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Å—Å–∏–∏.
 * –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ /api/auth/session –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.
 */
export function applySessionFetchPatch() {
  // –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω
  if ((globalThis.fetch as any).__patched) return;
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é fetch
  globalThis.fetch = async function patchedFetch(input: RequestInfo | URL, init?: RequestInit) {
    const url = input instanceof Request ? input.url : String(input);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Å—Å–∏–∏
    if (url.includes('/api/auth/session')) {
      console.log('üîÑ Intercepting session request:', url);
      
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (pendingSessionRequest) {
        console.log('üü† Reusing pending session request');
        const response = await pendingSessionRequest;
        
        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ Response –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        return new Response(JSON.stringify(lastSessionData), {
          status: response.status,
          statusText: response.statusText,
          headers: new Headers(response.headers),
        });
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
      if (lastSessionData) {
        console.log('üü¢ Returning cached session data');
        return new Response(JSON.stringify(lastSessionData), {
          status: 200,
          statusText: "OK",
          headers: new Headers({
            'Content-Type': 'application/json',
          }),
        });
      }
      
      // –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å
      console.log('üîµ Making real session request');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      pendingSessionRequest = originalFetch(input, init).then(async (response) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        try {
          const clonedResponse = response.clone();
          const data = await clonedResponse.json();
          lastSessionData = data;
          console.log('üíæ Session data cached');
        } catch (e) {
          console.error('Error parsing session response:', e);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return response;
      }).finally(() => {
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        pendingSessionRequest = null;
      });
      
      // –î–æ–∂–∏–¥–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
      const response = await pendingSessionRequest;
      
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
      return new Response(JSON.stringify(lastSessionData), {
        status: response.status,
        statusText: response.statusText,
        headers: new Headers(response.headers),
      });
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
    return originalFetch(input, init);
  };
  
  // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–∞—Ç—á –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω
  (globalThis.fetch as any).__patched = true;
  
  console.log('‚úÖ Session fetch patch applied');
}

/**
 * –û—á–∏—â–∞–µ—Ç –∫–µ—à —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–∏–ª —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
 */
export function invalidateSessionCache() {
  pendingSessionRequest = null;
  lastSessionData = null;
  console.log('üóëÔ∏è Session cache invalidated');
} 