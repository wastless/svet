name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: 1

      - name: Prepare deploy package
        run: |
          mkdir -p deploy-package
          cp -r .next deploy-package/
          cp -r public deploy-package/
          cp -r prisma deploy-package/
          cp package.json package-lock.json next.config.js deploy-package/
          mkdir -p deploy-package/src
          cp src/env.js deploy-package/src/
          cp Dockerfile.production deploy-package/Dockerfile
          cp Dockerfile.production deploy-package/Dockerfile.production
          cp docker-compose.yml deploy-package/
          cp deploy.sh deploy-package/
          chmod +x deploy-package/deploy.sh
          
      - name: Create .env.production file
        run: |
          cat > deploy-package/.env.production << EOF
          # Next Auth
          AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
          
          # Prisma и Supabase
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          DIRECT_URL="${{ secrets.DIRECT_URL }}"
          
          # Yandex Object Storage
          YANDEX_ACCESS_KEY_ID="${{ secrets.YANDEX_ACCESS_KEY_ID }}"
          YANDEX_SECRET_ACCESS_KEY="${{ secrets.YANDEX_SECRET_ACCESS_KEY }}"
          YANDEX_BUCKET_NAME="${{ secrets.YANDEX_BUCKET_NAME }}"
          EOF

      - name: Create deploy archive
        run: tar -czvf deploy-package.tar.gz deploy-package

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Adding Known Hosts
        run: ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Upload deploy package to VPS
        run: scp -P ${{ secrets.SSH_PORT }} deploy-package.tar.gz ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}:~/

      - name: Deploy on VPS
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            rm -rf ~/deploy-package
            mkdir -p ~/deploy-package
            tar -xzvf ~/deploy-package.tar.gz -C ~/
            cd ~/deploy-package
            
            # Создаем директории для Nginx
            mkdir -p nginx/ssl
            mkdir -p nginx/logs
            mkdir -p nginx/conf.d
            
            # Проверяем наличие SSL-сертификатов или копируем из текущего размещения
            if [ ! -f "nginx/ssl/certificate.crt" ] || [ ! -f "nginx/ssl/certificate.key" ]; then
              # Попытка скопировать существующие сертификаты, если они есть
              if [ -f "/etc/ssl/certs/certificate.crt" ]; then
                cp /etc/ssl/certs/certificate.crt nginx/ssl/certificate.crt
                cp /etc/ssl/private/certificate.key nginx/ssl/certificate.key
              fi
            fi
            
            # Запуск деплоя
            ./deploy.sh ${{ secrets.DOMAIN_NAME }}
          ENDSSH 