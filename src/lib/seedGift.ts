import { db } from "~/server/db";
import { saveGiftContent, generateContentPath } from "./giftContent";
import type { GiftContent } from "~/types/gift";

// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
export async function createExampleGift() {
  // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
  const giftRecord = await db.gift.create({
    data: {
      number: 1,
      title: "–ü–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫",
      isSecret: false,
      openDate: new Date("2024-12-25T00:00:00Z"), // –†–æ–∂–¥–µ—Å—Ç–≤–æ
      englishDescription: "Each memory has a soundtrack of its own.",
      hintImageUrl: "/uploads/hint-sticker.jpg",
      code: "fZX+gs6J",
      contentPath: "", // –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–π, –∑–∞–ø–æ–ª–Ω–∏–º –Ω–∏–∂–µ
      memoryPhoto: {
        create: {
          text: "@savdis",
          photoUrl: "/uploads/memory-unlock.jpg"
        }
      }
    }
  });

  // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const content: GiftContent = {
    blocks: [
      {
        type: "text",
        content: "–î–æ—Ä–æ–≥–∞—è –õ–µ—Å—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å —ç—Ç–∏–º –æ—Å–æ–±–µ–Ω–Ω—ã–º –¥–Ω–µ–º!",
        style: "title"
      },
      {
        type: "quote",
        content: "Each memory has a soundtrack of its own.",
        style: "italic"
      },
      {
        type: "image",
        url: "/uploads/hint-card.jpg",
        caption: "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ —Ç–≤–æ–µ–º—É –ø–æ–¥–∞—Ä–∫—É",
        alt: "–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"
      },
      {
        type: "text",
        content: "–ü–æ–º–Ω–∏—à—å, –∫–∞–∫ –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ –æ —Ç–æ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–∂–µ–Ω? –≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ - –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
        style: "normal"
      },
      {
        type: "gallery",
        images: [
          {
            url: "/uploads/memory-1.jpg",
            caption: "–ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
            alt: "–§–æ—Ç–æ –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏"
          },
          {
            url: "/uploads/memory-2.jpg", 
            caption: "–î–µ–Ω—å –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
            alt: "–§–æ—Ç–æ —Å –ø—Ä–∏—Ä–æ–¥—ã"
          }
        ],
        layout: "grid"
      }
    ],
    metadata: {
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      version: "1.0"
    }
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ ID
  const contentPath = generateContentPath(giftRecord.id);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∞–π–ª
  const contentSaved = await saveGiftContent(contentPath, content);
  
  if (!contentSaved) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥–∞—Ä–∫–∞");
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
  const updatedGift = await db.gift.update({
    where: { id: giftRecord.id },
    data: { contentPath: contentPath }
  });

  return updatedGift;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
export async function createSecretGift() {
  // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const giftRecord = await db.gift.create({
    data: {
      number: 2,
      title: "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", 
      isSecret: true,
      openDate: new Date("2024-12-26T00:00:00Z"),
      englishDescription: "Some memories are meant to be kept secret.",
      hintImageUrl: "/uploads/secret-hint.jpg",
      code: null,
      contentPath: "", // –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–π
      memoryPhoto: {
        create: {
          text: "secret memory",
          photoUrl: "/uploads/secret-memory.jpg"
        }
      }
    }
  });
  
  const content: GiftContent = {
    blocks: [
      {
        type: "secret",
        content: [
          {
            type: "text",
            content: "–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –õ–µ—Å–∏! üíï",
            style: "title"
          },
          {
            type: "text",
            content: "–ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –ª–∏—á–Ω–æ–µ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ–µ...",
            style: "normal"
          }
        ],
        accessMessage: "Oops, only Lesya sees this content"
      }
    ],
    metadata: {
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      version: "1.0"
    }
  };

  const contentPath = generateContentPath(giftRecord.id);
  const contentSaved = await saveGiftContent(contentPath, content);
  
  if (!contentSaved) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞");
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
  const updatedGift = await db.gift.update({
    where: { id: giftRecord.id },
    data: { contentPath: contentPath }
  });

  return updatedGift;
} 